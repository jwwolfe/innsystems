#summary Design/Structure layout.
#labels Featured,Phase-Design

= Design/Structure =

Shows the design of the current program and the breakdown of the classes.


== innsystems ==

=== backpropagation package ===

 * backpropagation.java - This is the main neural networking class, it is generalized so it can handle any data given to it in the correct format

 * Format2.java - This class is going to be rewritten for each type of data that will be tested, while it sounds like a pain in the end it will allow for a generalization of the whole project and then the individual can create there own "Format2.java" class to specify how to handle they data they want to test.

=== pso ===

 * (no name).java (Data) - Responsible for handling the data and positions of the particles during the run of the PSO

 * (no name).java (Particles) - Keeps a list of all particles, there present variable values and the results of the current run. Also keeps track of the global best, etc

 * (no name).java (Main) - Uses both of the previous class to store data and keep track of the particles. It will take this information to calculate the variables for the next generation of particles and update everything accordingly


=== networking ===

 * netComm.java - Responsible for sending of data over the networks or general communications

 * netHost.java - Uses netComm and some of it own methods to facilitate the job of "controller" on the network

 * netClient.java - Uses netComm to communicate, placed on all workstations that will be running the PSO, controller tells the client what to do





